#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00000001191d7b75, pid=30595, tid=138499
#
# JRE version: OpenJDK Runtime Environment Corretto-11.0.12.7.2 (11.0.12+7) (build 11.0.12+7-LTS)
# Java VM: OpenJDK 64-Bit Server VM Corretto-11.0.12.7.2 (11.0.12+7-LTS, mixed mode, tiered, compressed oops, g1 gc, bsd-amd64)
# Problematic frame:
# J 825 c1 java.nio.DirectIntBufferU.get(I)I java.base@11.0.12 (29 bytes) @ 0x00000001191d7b75 [0x00000001191d7a60+0x0000000000000115]
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://github.com/corretto/corretto-11/issues/
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxMetaspaceSize=256m -XX:+HeapDumpOnOutOfMemoryError -agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=127.0.0.1:60415 --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.prefs/java.util.prefs=ALL-UNNAMED --add-opens=java.prefs/java.util.prefs=ALL-UNNAMED --add-opens=java.base/java.nio.charset=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED -Xms256m -Xmx512m -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant org.gradle.launcher.daemon.bootstrap.GradleDaemon 7.3

Host: MacBookPro17,1 x86_64 2400 MHz, 8 cores, 16G, Darwin 21.2.0
Time: Thu Dec 30 15:29:29 2021 EST elapsed time: 34.065035 seconds (0d 0h 0m 34s)

---------------  T H R E A D  ---------------

Current thread (0x00007fb59e083000):  JavaThread "Execution worker for ':'" [_thread_in_Java, id=138499, stack(0x0000000316f5b000,0x000000031705b000)]

Stack: [0x0000000316f5b000,0x000000031705b000],  sp=0x00000003170543a0,  free space=996k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 825 c1 java.nio.DirectIntBufferU.get(I)I java.base@11.0.12 (29 bytes) @ 0x00000001191d7b75 [0x00000001191d7a60+0x0000000000000115]
J 1538 c1 jdk.internal.jimage.BasicImageReader.findLocation(Ljava/lang/String;Ljava/lang/String;)Ljdk/internal/jimage/ImageLocation; java.base@11.0.12 (115 bytes) @ 0x00000001193a975c [0x00000001193a92e0+0x000000000000047c]
J 1124 c1 jdk.internal.module.SystemModuleFinders$SystemModuleReader.findImageLocation(Ljava/lang/String;)Ljdk/internal/jimage/ImageLocation; java.base@11.0.12 (42 bytes) @ 0x00000001192b554c [0x00000001192b5260+0x00000000000002ec]
j  jdk.internal.module.SystemModuleFinders$SystemModuleReader.read(Ljava/lang/String;)Ljava/util/Optional;+2 java.base@11.0.12
j  jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/BuiltinClassLoader$LoadedModule;)Ljava/lang/Class;+79 java.base@11.0.12
J 8712 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@11.0.12 (143 bytes) @ 0x000000011a433d84 [0x000000011a4339a0+0x00000000000003e4]
J 8714 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@11.0.12 (40 bytes) @ 0x000000011a435394 [0x000000011a434de0+0x00000000000005b4]
J 2528 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@11.0.12 (7 bytes) @ 0x00000001206f5be4 [0x00000001206f5ba0+0x0000000000000044]
v  ~StubRoutines::call_stub
